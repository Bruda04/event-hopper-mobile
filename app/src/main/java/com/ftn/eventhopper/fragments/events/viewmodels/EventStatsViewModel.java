package com.ftn.eventhopper.fragments.events.viewmodels;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.ftn.eventhopper.clients.ClientUtils;
import com.ftn.eventhopper.clients.services.events.EventService;
import com.ftn.eventhopper.shared.dtos.events.GraphDataDTO;
import com.ftn.eventhopper.shared.dtos.events.RatingTimeSeriesDTO;
import com.ftn.eventhopper.shared.dtos.events.SimpleEventDTO;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.properties.TextAlignment;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.UUID;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class EventStatsViewModel extends ViewModel {

    private final MutableLiveData<GraphDataDTO> stats = new MutableLiveData<>();

    public LiveData<GraphDataDTO> getStats() {
        return stats;
    }

    public void fetchStats(String eventId) {
        ClientUtils.eventService.getEventGraph(UUID.fromString(eventId)).enqueue(new Callback<GraphDataDTO>() {
            @Override
            public void onResponse(Call<GraphDataDTO> call, Response<GraphDataDTO> response) {
                if (response.isSuccessful()) {
                    stats.setValue(response.body());
                }
            }

            @Override
            public void onFailure(Call<GraphDataDTO> call, Throwable t) {
                stats.setValue(null);
            }
        });
    }

    public void generateStatsPdf(GraphDataDTO stats, Bitmap lineChart, Bitmap pieChart, Bitmap barChart, Context context) {
        try {
            String fileName = "Event_Stats_" + System.currentTimeMillis() + ".pdf";
            Uri pdfUri = savePdfToMediaStore(fileName, context);
            if (pdfUri == null) {
                Log.e("PDF", "Failed to create PDF URI.");
                return;
            }

            OutputStream outputStream = context.getContentResolver().openOutputStream(pdfUri);
            PdfWriter writer = new PdfWriter(outputStream);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // Title
            document.add(new Paragraph("Event Statistics")
                    .setFontSize(24)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontColor(new DeviceRgb(0, 51, 102))); // Dark Blue

            // Summary Section
            document.add(new Paragraph("Invitation Summary")
                    .setFontSize(16)
                    .setBold()
                    .setFontColor(new DeviceRgb(0, 0, 0))
                    .setMarginTop(10f));

            document.add(new Paragraph("Max Attendance: " + stats.getMaxAttendance()));
            document.add(new Paragraph("Accepted Invitations: " + stats.getNumAcceptedInvitations()));
            document.add(new Paragraph("Pending Invitations: " + stats.getNumPendingInvitations()));
            document.add(new Paragraph("Declined Invitations: " + stats.getNumDeclinesInvitations()));

            document.add(new Paragraph("\n")); // spacing

            // Add charts with labels
            if (lineChart != null) {
                document.add(new Paragraph("Average Rating Over Time").setBold().setFontSize(14));
                addBitmapToPdf(lineChart, document, false, false);
            }
            if (pieChart != null) {
                document.add(new Paragraph("Invitation Breakdown").setBold().setFontSize(14).setMarginTop(10f));
                addBitmapToPdf(pieChart, document, true, false);  // pie needs resizing
            }
            if (barChart != null) {
                document.add(new Paragraph("Attendance Overview").setBold().setFontSize(14).setMarginTop(10f));
                if(pieChart == null){
                    addBitmapToPdf(barChart, document, false, true);
                }else{
                    addBitmapToPdf(barChart, document, false, false);
                }

            }

            // Footer
            document.add(new Paragraph("\nGenerated by EventHopper")
                    .setFontSize(10)
                    .setFontColor(new DeviceRgb(150, 150, 150))
                    .setTextAlignment(TextAlignment.CENTER));

            document.close();

            // Auto-open
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setDataAndType(pdfUri, "application/pdf");
            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            context.startActivity(intent);

        } catch (Exception e) {
            Log.e("PDF", "Error generating PDF", e);
        }
    }

    private void addBitmapToPdf(Bitmap bitmap, Document document, boolean isPieChart, boolean isBarChart) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
        byte[] byteArray = stream.toByteArray();

        ImageData imageData = ImageDataFactory.create(byteArray);
        Image image = new Image(imageData);

        float docWidth = document.getPdfDocument().getDefaultPageSize().getWidth()
                - document.getLeftMargin() - document.getRightMargin();

        if (isPieChart) {
            float targetWidth = docWidth * 0.6f;
            float scaleFactor = targetWidth / image.getImageWidth();
            image.scaleAbsolute(targetWidth, image.getImageHeight() * scaleFactor);
            image.setMarginLeft((docWidth - targetWidth) / 2); // center horizontally
        } else if (isBarChart) {
            float targetWidth = docWidth * 0.8f;
            float scaleFactor = targetWidth / image.getImageWidth();
            image.scaleAbsolute(targetWidth, image.getImageHeight() * scaleFactor);
            image.setMarginLeft((docWidth - targetWidth) / 2); // center horizontally
        } else {
            image.setAutoScale(true);
        }

        document.add(image);
    }


    private Uri savePdfToMediaStore(String fileName, Context context) {
        try {
            ContentValues values = new ContentValues();
            values.put(MediaStore.MediaColumns.DISPLAY_NAME, fileName);
            values.put(MediaStore.MediaColumns.MIME_TYPE, "application/pdf");

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOCUMENTS);
            }

            return context.getContentResolver().insert(MediaStore.Files.getContentUri("external"), values);
        } catch (Exception e) {
            Log.e("PDF", "Error saving PDF", e);
            return null;
        }
    }

}
